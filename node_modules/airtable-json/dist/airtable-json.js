function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.promise.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import airtable from "airtable";
import handlePopulate from "./populate.js";

var airtableJson = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (_ref) {
    var {
      auth_key,
      base_name,
      primary,
      view,
      populate = [],
      sort,
      filter,
      fields
    } = _ref;

    if (!base_name) {
      throw "You need to pass in a base_name";
    }

    if ((base_name === null || base_name === void 0 ? void 0 : base_name.length) !== 17) {
      throw "base_name should be exactly 17 characters";
    }

    airtable.configure({
      apiKey: auth_key
    });
    var base = airtable.base(base_name);
    var select_object = {};
    if (view) select_object.view = view;
    if (filter) select_object.filterByFormula = filter;
    if (sort) select_object.sort = sort;
    if (fields) select_object.fields = fields;
    var things = [];
    yield base(primary).select(select_object).eachPage((records, fetchNextPage) => {
      records.forEach(function (record) {
        things.push(_objectSpread(_objectSpread({}, record._rawJson.fields), {}, {
          __id: record.id
        }));
      });
      fetchNextPage();
    });

    for (var {
      local,
      other,
      flatten,
      as
    } of populate) {
      things = yield handlePopulate({
        auth_key,
        base_name,
        local,
        other,
        things,
        flatten,
        as
      });
    }

    return things;
  });

  return function airtableJson(_x) {
    return _ref2.apply(this, arguments);
  };
}();

export default airtableJson;